services:
  db:
    container_name: db
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_EXTENSIONS: uuid-ossp,pgcrypto
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-extensions.sql:/docker-entrypoint-initdb.d/init-extensions.sql

  api:
    container_name: api
    build:
      context: ..
      dockerfile: ./SFServer.API/Dockerfile
    restart: unless-stopped
    environment:
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION}
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
      GOOGLE_PLAY_CLIENT_ID: ${GOOGLE_PLAY_CLIENT_ID}
      JWT_SECRET: ${JWT_SECRET}
      JWT_TIMEOUT_HOURS: ${JWT_TIMEOUT_HOURS}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    volumes:
      - datakeys:/var/app-keys
    ports:
      - "5000:8080"
    depends_on:
      db:
        condition: service_healthy

  ui:
    container_name: ui
    build:
      context: ..
      dockerfile: ./SFServer.UI/Dockerfile
    restart: unless-stopped
    volumes:
      - datakeys:/var/app-keys
    ports:
      - "5001:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
      SERVER_COPYRIGHT: ${SERVER_COPYRIGHT}
      SERVER_TITLE: ${SERVER_TITLE}
      API_BASE_URL: ${API_BASE_URL}
      JS_API_BASE_URL: ${JS_API_BASE_URL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
      
volumes:
  postgres-data:
  datakeys:
