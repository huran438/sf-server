@page "{id:guid}"
@using SFServer.Shared.Server.Inventory
@model SFServer.UI.Pages.Inventory.EditInventoryItemModel
@{
    ViewData["Title"] = "Edit Inventory Item";
}

<h1>Edit Item</h1>
<form method="post">
    <input type="hidden" asp-for="Item.Id" />
    <div class="mb-3">
        <label asp-for="Item.Title" class="form-label"></label>
        <input asp-for="Item.Title" class="form-control" />
    </div>
    <div class="mb-3">
        <label asp-for="Item.Type" class="form-label"></label>
        <enum-dropdown asp-for="Item.Type" enum-type="@(typeof(InventoryItemType))" />
    </div>
    <div class="mb-3">
        <label asp-for="Item.Rarity" class="form-label"></label>
        <enum-dropdown asp-for="Item.Rarity" enum-type="@(typeof(InventoryItemRarity))" />
    </div>
    <div class="mb-3">
        <label asp-for="Item.Price" class="form-label"></label>
        <input asp-for="Item.Price" class="form-control" />
    </div>
    <div class="mb-3">
        <label asp-for="Item.ProductId" class="form-label"></label>
        <input asp-for="Item.ProductId" class="form-control" />
    </div>
    <div class="form-check mb-3">
        <input class="form-check-input" asp-for="Item.IsAvailableToBuy" />
        <label class="form-check-label" asp-for="Item.IsAvailableToBuy"></label>
    </div>
    <div class="form-check mb-3">
        <input class="form-check-input" asp-for="Item.IsAvailableToDrop" />
        <label class="form-check-label" asp-for="Item.IsAvailableToDrop"></label>
    </div>
    <div class="mb-3">
        <label class="form-label" for="tagsInput">Tags (comma separated)</label>
        <input id="tagsInput" class="form-control" asp-for="Tags" />
    </div>
    <div class="mb-3">
        <label class="form-label">Drop</label>
        <table class="table table-sm" id="dropTable">
            <thead>
            <tr>
                <th>Type</th>
                <th>Item/Currency</th>
                <th>Amount</th>
                <th></th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
        <button type="button" id="addDropBtn" class="btn btn-sm btn-secondary">Add</button>
        <input type="hidden" asp-for="DropJson" id="DropJson" />
    </div>
    <div class="form-check mb-3">
        <input class="form-check-input" asp-for="Item.AutoUnpack" />
        <label class="form-check-label" asp-for="Item.AutoUnpack"></label>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</form>
@section Scripts {
<script>
    const headers = jwtToken ? {
        'Authorization': 'Bearer ' + jwtToken,
        'Accept': 'application/json'
    } : { 'Accept': 'application/json' };
    let items = [];
    let currencies = [];
    let drops = [];

    async function loadData() {
        const [itResp, curResp] = await Promise.all([
            fetch(apiBaseUrl + 'Inventory', { headers }),
            fetch(apiBaseUrl + 'Currency', { headers })
        ]);
        if (itResp.ok) items = await itResp.json();
        if (curResp.ok) currencies = await curResp.json();
    }

    function optionHtml(list, selected) {
        return list.map(i => `<option value="${i.Id}" ${i.Id===selected?'selected':''}>${i.Title}</option>`).join('');
    }

    function updateHidden() {
        document.getElementById('DropJson').value = JSON.stringify(drops);
    }

    function render() {
        const tbody = document.querySelector('#dropTable tbody');
        tbody.innerHTML = '';
        drops.forEach((d, idx) => {
            const type = d.ItemId ? 'Item' : 'Currency';
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>
                    <select class="form-select form-select-sm type" data-index="${idx}">
                        <option value="Item" ${type==='Item'?'selected':''}>Item</option>
                        <option value="Currency" ${type==='Currency'?'selected':''}>Currency</option>
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm item" data-index="${idx}"></select>
                    <select class="form-select form-select-sm currency" data-index="${idx}"></select>
                </td>
                <td>
                    <input type="number" min="1" class="form-control form-control-sm amount" data-index="${idx}" value="${d.amount}">
                </td>
                <td><button type="button" class="btn btn-sm btn-danger remove" data-index="${idx}">Remove</button></td>`;
            tbody.appendChild(tr);

            const itemSelect = tr.querySelector('select.item');
            const currencySelect = tr.querySelector('select.currency');
            itemSelect.style.display = type === 'Item' ? 'block' : 'none';
            currencySelect.style.display = type === 'Currency' ? 'block' : 'none';
            itemSelect.innerHTML = optionHtml(items, d.ItemId);
            currencySelect.innerHTML = optionHtml(currencies, d.CurrencyId);
        });
        updateHidden();
    }

    function addDrop() {
        const entry = items.length > 0
            ? { ItemId: items[0].Id, CurrencyId: null, Amount: 1 }
            : { ItemId: null, CurrencyId: currencies[0]?.Id ?? null, Amount: 1 };
        drops.push(entry);
        render();
    }

    document.addEventListener('change', function(e) {
        const idx = e.target.getAttribute('data-index');
        if (idx === null) return;
        const entry = drops[Number(idx)];
        if (e.target.classList.contains('type')) {
            if (e.target.value === 'Item') {
                entry.ItemId = items[0]?.Id ?? null;
                entry.CurrencyId = null;
            } else {
                entry.CurrencyId = currencies[0]?.Id ?? null;
                entry.ItemId = null;
            }
            render();
        } else if (e.target.classList.contains('item')) {
            entry.ItemId = e.target.value;
            updateHidden();
        } else if (e.target.classList.contains('currency')) {
            entry.CurrencyId = e.target.value;
            updateHidden();
        } else if (e.target.classList.contains('amount')) {
            entry.Amount = parseInt(e.target.value) || 0;
            updateHidden();
        }
    });

    document.addEventListener('click', function(e) {
        if (e.target.id === 'addDropBtn') {
            addDrop();
        } else if (e.target.classList.contains('remove')) {
            const idx = Number(e.target.getAttribute('data-index'));
            drops.splice(idx, 1);
            render();
        }
    });

    document.addEventListener('DOMContentLoaded', async function() {
        await loadData();
        try { drops = JSON.parse(@Html.Raw(Model.DropJson ?? "[]")); } catch { drops = []; }
        render();
    });
</script>
}
