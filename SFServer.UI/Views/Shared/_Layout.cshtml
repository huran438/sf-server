@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Configuration
@using SFServer.Shared.Server.UserProfile
@inject IConfiguration Configuration
@using SFServer.UI
@inject ServerSettingsService SettingsService
@inject ProjectContext ProjectContext
@using SFServer.Shared.Server.Project
@{
    var settings = await SettingsService.GetSettingsAsync();
    var projects = new List<ProjectInfo>();
    if (User.Identity?.IsAuthenticated == true)
    {
        using var client = User.CreateApiClient(Configuration);
        projects = await client.GetFromMessagePackAsync<List<ProjectInfo>>("Projects") ?? new();
    }
}

<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"]</title>

    <!-- Styles -->
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap-icons/font/bootstrap-icons.css"/>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>

    <!-- API / Auth JS variables -->
    <script>
        let apiBaseUrl = '@Configuration["JS_API_BASE_URL"]';
        if (!apiBaseUrl.endsWith("/")) {
            apiBaseUrl += "/";
        }
        let jwtToken = '@User.FindFirst("JwtToken")?.Value';
    </script>
</head>
<body>
<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-light border-bottom box-shadow mb-3">
        <div class="container-fluid">
            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                @(settings?.ServerTitle ?? Configuration["SERVER_TITLE"])
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse"
                    aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">
                            <i class="bi bi-house-door"></i> Home
                        </a>
                    </li>
                    @if (User.IsInRole(nameof(UserRole.Admin)) || User.IsInRole(nameof(UserRole.Developer)))
                    {
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="UserProfiles" asp-action="Index">
                                <i class="bi bi-people"></i> Users
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Economy" asp-action="Index">
                                <i class="bi bi-currency-dollar"></i> Economy
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Projects" asp-action="Index">
                                <i class="bi bi-collection"></i> Projects
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-page="/Inventory/Index">
                                <i class="bi bi-box"></i> Inventory
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Statistics" asp-action="Index">
                                <i class="bi bi-bar-chart"></i> Statistics
                            </a>
                        </li>
                    }
                </ul>
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="d-flex align-items-center">
                        <form asp-controller="Projects" asp-action="Select" method="post" class="me-3">
                            <select name="id" class="form-select form-select-sm" onchange="this.form.submit();">
@foreach (var p in projects)
{
                                <option value="@p.Id" selected="@(p.Id == ProjectContext.CurrentProjectId ? "selected" : null)">@p.Name</option>
}
                            </select>
                        </form>
                        <span id="server-time" class="me-3 text-primary fw-bold">--:--:--</span>
                        @{
                            var userId = User.FindFirst("UserId")?.Value;
                            var userName = User.Identity.Name;
                        }
                        @if (User.IsInRole(nameof(UserRole.Admin)))
                        {
                            <a class="me-3 text-muted text-decoration-none" asp-controller="UserProfiles"
                               asp-action="Edit" asp-route-id="@userId">
                                <i class="bi bi-person-badge"></i> @userName
                            </a>
                        }
                        else if (User.IsInRole(nameof(UserRole.Developer)))
                        {
                            <a class="me-3 text-muted text-decoration-none" asp-controller="UserProfiles"
                               asp-action="Edit" asp-route-id="@userId">
                                <i class="bi bi-code-slash"></i> @userName
                            </a>
                        }
                        else if (User.IsInRole(nameof(UserRole.User)))
                        {
                            <a class="me-3 text-muted text-decoration-none" asp-controller="UserProfiles"
                               asp-action="Edit" asp-route-id="@userId">
                                <i class="bi bi-person"></i> @userName
                            </a>
                        }
                        else if (User.IsInRole(nameof(UserRole.Guest)))
                        {
                            <a class="me-3 text-muted text-decoration-none" asp-controller="UserProfiles"
                               asp-action="Edit" asp-route-id="@userId">
                                <i class="bi bi-person-lines-fill"></i> @userName
                            </a>
                        }
                        <form asp-controller="Account" asp-action="Logout" method="post" class="mb-0">
                            <button type="submit" class="btn btn-outline-danger btn-sm">
                                <i class="bi bi-box-arrow-right"></i> Logout
                            </button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </nav>
</header>

<div class="container">
    <main role="main" class="pb-3">
        @RenderBody()
    </main>
</div>

<footer class="footer border-top text-body-secondary bg-body-tertiary">
    <div class="container d-flex justify-content-between align-items-center flex-wrap py-3">
        <span>@settings?.ServerCopyright</span>

        @if (User.IsInRole("Admin"))
        {
            <a class="btn btn-outline-secondary btn-sm" asp-controller="ServerSettings" asp-action="Index">
                <i class="bi bi-gear"></i> Server Settings
            </a>
        }

        <a id="themeToggleBtn" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-moon"></i> Toggle Theme
        </a>
    </div>
</footer>


<!-- Toast Container -->
<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3">
        @if (TempData["Success"] != null)
        {
            <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-success">Success</strong>
                    <small>Now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["Success"]
                </div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-danger">Error</strong>
                    <small>Now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["Error"]
                </div>
            </div>
        }
    </div>
</div>

<!-- Scripts -->
<script src="~/lib/chart.js/dist/chart.umd.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

@await RenderSectionAsync("Scripts", required: false)

<!-- Theme and Clock Logic -->
<script>
   document.addEventListener('DOMContentLoaded', function () {
            // Find all toast elements within the container.
            var toastEls = document.querySelectorAll('.toast');
            toastEls.forEach(function (toastEl) {
                // Initialize each toast with a delay (e.g., 5 seconds).
                var toastInstance = new bootstrap.Toast(toastEl, { delay: 5000 });
                toastInstance.show();
            });
        });
        
    function formatUTCDate(date) {
        const day = ("0" + date.getUTCDate()).slice(-2);
        const month = ("0" + (date.getUTCMonth() + 1)).slice(-2);
        const year = date.getUTCFullYear();
        const hours = ("0" + date.getUTCHours()).slice(-2);
        const minutes = ("0" + date.getUTCMinutes()).slice(-2);
        const seconds = ("0" + date.getUTCSeconds()).slice(-2);
        return `${day}.${month}.${year} ${hours}:${minutes}:${seconds} UTC`;
    }

    function updateServerTime() {
        const now = new Date();
        const formattedTime = formatUTCDate(now);
        const timeElem = document.getElementById('server-time');
        if (timeElem) {
            timeElem.textContent = formattedTime;
        }
    }

    function copyEpochTime() {
        const now = new Date();
        const epochTime = Math.floor(now.getTime() / 1000);
        navigator.clipboard.writeText(epochTime.toString())
            .then(() => alert("Unix epoch time (" + epochTime + ") copied to clipboard."))
            .catch(err => console.error("Failed to copy epoch time:", err));
    }

    setInterval(updateServerTime, 1000);
    updateServerTime();

    document.addEventListener('DOMContentLoaded', function () {
        const timeElem = document.getElementById('server-time');
        if (timeElem) {
            timeElem.style.cursor = "pointer";
            timeElem.addEventListener('click', copyEpochTime);
        }
    });

    function updateNavbarClass(theme) {
        const navbar = document.querySelector('nav.navbar');
        if (!navbar) return;

        navbar.classList.toggle('navbar-dark', theme === 'dark');
        navbar.classList.toggle('bg-dark', theme === 'dark');
        navbar.classList.toggle('navbar-light', theme !== 'dark');
        navbar.classList.toggle('bg-light', theme !== 'dark');

        const navLinks = navbar.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.classList.toggle('text-light', theme === 'dark');
            link.classList.toggle('text-dark', theme !== 'dark');
        });
    }

    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-bs-theme', savedTheme);
    updateNavbarClass(savedTheme);

    document.getElementById('themeToggleBtn')?.addEventListener('click', () => {
        const html = document.documentElement;
        const currentTheme = html.getAttribute('data-bs-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        html.setAttribute('data-bs-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateNavbarClass(newTheme);
    });

</script>
</body>
</html>
